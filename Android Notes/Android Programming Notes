


will see Java in android source code
can write java and kotlin in same project

APK - actual application file
Projects - 10+ hours each

Focus on developing > 5.0

Dalvik - is a JVM -- programs are compiled to Java byte code

"Just in time compliation" - source code isnt compiled until its needed

Android Runtime (APT) - replaced Dalvik
"Ahead of time" compliation

Open source -- good and bad; reason why every manufacturer has slightly different versions running on phones



Monday - 1/28

Layouts - visual structure of the UI

created using XML (mostly) and/or directly in code (runtime)

XML - predefined widgets and layouts

Common layouts - ViewGroup (widgets that contain widgets)
Linear, relative, and frame (allows for stacks), TableLayout (not commonly used), GridLayout,

Constraints (apple/iOS like) - similiar to relative 

*** layout_width, layout_height ** required on most constraints

** android:id - A unique indentifier for the element * required

Android strings - saved into a string.xml file

findViewByID - computationally expensive

Activities - become the Controller
	Must  be added to the manifest file

Lifecycle - similiar to iOS
	setup done in onCreate(), usually.  Can be done in onStart() and onResume()

Bundle - used to save configuration information, very small

```
onSaveInstanceState(outState: Bundle) // used to save states
````

ViewModel (new) - replacing Bundles

 can use colors.xml to theme entire application 

listener pattern */

````
var falseButton: Button? = null

falseButton = findViewByID(R.id.falseButton)

falseButton?.setOnClickListener { }


import kotlinx.android.synthetic.main.activity_main.* // import everything in xml that has an id and use as a variable
// no longer need to declare button as a variable, no longer need optional chaining
````


Wednesday 1/30

What is Kotlin?

Google adopted Kotlin as 1st class language

More strict then Java

backwards compatiable with java to 1.6

almost 100% interoperable with Java -- can be written to not be compatiable

Anko framework - simplifies network calls; one liners.

can have Kotlin/Java in same package but not in same file
can have multiple classes in a Kotlin file; not in java

type comes after variable name.  return type comes after

````

myvariable: Int

fun sum(a:Int, b:Int): Int{
	return a + b
}

````



defining variables

var is mutable; val is immutable
type is inferred

````
var PI = -3.14 //infers type as Double
var x = 0  //infers type as Int

// can also var PI: float = -3.14 to force as float

````

functions can be store to a property

Any - > a generic type (sort of); good for when you don't know what it'll be
type checking with keyword is

````
if (x is String) {  ... }

Once you check type, obj is guaranteed to be that type
works for subclasses too

Ex

if (fox is Animal) or if (fox is Mammal)

Better way -

---------------------
when (x) {
	is Int -> print(x + 1)
	is String -> print(x.length + 1)
	is IntArray -> print(x.sum())

}
---------------------

Cast same as swift

use as keyword

Dealing with Nulls - use ?

````

var x:String? = null   // x is nullable

val x: String? = y as? String  //if y is a string, then can be put in xl if it fails then x is null

`````

strings store in a string.xml

<resources>
	<string name = "an example string">exampleString</string>
</resources>
	


writing a constructor

'''
class QuizModel(){
	val questions: ArrayList<Question>
	var position: Int = 0

	constructor() {
		this.question = arrayListOf(
		Question(R.string.question_ocean, isTrue: true),
		Question(R.string.question_mideast, isTrue: false)
		)
	}
}

OR

class QuizModel(){
	val questions:ArrayList<Question> = arrayListOf(
		Question(R.string.question_ocean, isTrue: true),
		Question(R.string.question_mideast, isTrue: false)
	)
}

'''

unique to Kotlin vs Java

data class Question(val questionResId: Int, val isTrue: Boolean)

replaces need for getters/setters from Java

lateinit - property that is uninitalized; assumes you will initalize before using

kotlin handles static/class variables different then java
use "Companion" object - one per class

----
companion object {
    private const val POSITION_KEY = "Position"
    private const val TAG = "MainActivity"
}

usuage:

outState?.putInt(POSITION_KEY, model.position)


check if nullable value exists :
val position = savedInstanceState?.getInt(POSITION_KEY, 0)// overloaded function - the 0 gives optional value

?: //if null then assign 0
val position = savedInstanceState?.getInt(POSITION_KEY, 0) ?: 0

Activities -
    the user interaction
    Activity Manager - OS level framework that manages all activities
    has number of methods, can get device information; global OS componetent

easy to start activity

startActivity(intent: intent)
also
startActivityForResult(intent: Intent, code Int)

Intents - how to communicate between Activities via Activity Manager
main uses:
start acitivity, start service, start a broadcast

types:
Explicit and Implicit

Activity A -> startActivity -> Intent -> Android System -> Intent -> oncreate -> activity B

elements:
Component Name (optional) - makes it explicit ex - com.example.ActivityClassName

Explicit intent - starts specific service

Implicit Intent - device owner choses what to open

https://developer.android.com/guide/components/intents-filters

extras - assigning data to your intent

shutting down the activity -
finish()
finishActivity(requestCode: Int)
let system finish it (use back button)

Debugging
click on bug to start debugging mode

methods:
stack trace, break points, exception breakpoints, logging, android lint (ide sqiggles)

stack trace - call history to see what failed
log exceptions
log.d(TAG, "String", Exception());

Exception Breakpoint - stops on an exception; pauses the app before the exception

android link - finds defect in code without running it, running all the time


Logging -


scopes

Internal - available to the module
private - only that class can use
public - exposed publically, anyone can use
open - anyone can use it and overright it


setContentView() -- call to attach class to activity

activities must be in the manifest to start
"unable to find explicit activity class ..." = activity not in manifest


kind of switchs statement

val messageResID = when {
    isCheater -> R.string.judgement_toast_text
    correct -> R.string.correct_toast_text
    else -> R.string.incorrect_toast_text
}

also

val messageResID = when {
    true -> R.string.judgement_toast_test
    false -> when (correct)
    isCheater -> R.string.judgement_toast_text
    correct -> R.string.correct_toast_text
    else -> R.string.incorrect_toast_text
}


Fragments - can prvent them from being destroyed when the screen is changed

roles:
1. UI component
2.controlling behavior/data

similiar lifecycle methods

layouts created in onCreateView()

can also add to xml

<fragment>

tools:layout="@layout/fragment_layout" -> tells preview to draw layout inside of the fragment

getFragmentByID() -- id added by programmer
getFragmentByTag()

popBackStack() - back button for fragments

fragment communication to parent
create a listener (delegate)

Java way -
    create public interface
    set of definations  (protocals from swift)

mListener = (MyFragementListener) activity;

class MainActivity : Activity(), CheatActivity.CheatingListener {
    override fun userDidSeeAnswer () {
        isCheater = True;
    }


}


class CheatActivity: AppCompatActivity {



}


listener?.userDidSeeAnswer();

Main Thread - Also known as the UI Thread. Process all UI related events.

all events triggered from UI widgets run on this thread.
developer has to design app to be multithreaded

DON'T DO-
Block the main thread.  Long running processes should be run on a different thread.  Dispatc to another thread.
Long running threads:
Network calls, loops. Networking calls do not use another thread by default
Update the UI outside of the main thread.

DO -
create new thread.  "background or worker thread"
POSt messages back to the main thread
keep app responsive

Create a runnable and a handler.  maybe thread pool
OR
subclass of AsyncTask

HARD WAY --> probably won't do this much in class or in projects
-create executor/execute tasks
tons of processes - use a thread pool.  run it in the background
developer can see # of cores, pool size, keep alive, and other stats.
Only can use as many cores as device has.  OS will limit

examples -- see slides
Executors.newFixedThreadPool(count)

Uses - lots of HTTP requests, heavy image processes, high platform utilization, reduces thread overhead

Thread -
val thread - Thread(Runnable() { ... })
thread.start()

can't stop or cancel a thread (deprecated)
great for 1 and done tasks, posting messages to the UI (might use this in class/projects)

Handler Thread - better version of thread (see slide deck)

Create a project -

Flashy

fragment class


fragment_flashy

Need to rewatch video for portion on coding

fragments will be optional

private var viewFragment: FlashyViewFragment? = null

override fun onCreate(savedInstanceState: Bundle?){
    super.onCreate(savedInstanceState)
    setContentView(R.layout.activity_main)

    viewFragment = supportFragmentManager.findFragmentById(R.id.testContainer, FlashyViewFragment::class.java ) as? FlashyViewFragment
    if (viewFragment == null){
        viewFragment = FlashyViewFragment()
        supportFragmentManager.beingTransaction()
        .add(R.id.testContainer, viewFragment())
        .commit()
    } else {
        Log.e( ..)
    }

}

retainInstance = true // keeps a fragment from being destroyed

fragments cannot speak to each other.  must communicate via activities


